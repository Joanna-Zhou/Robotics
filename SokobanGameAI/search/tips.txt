/** WRITE YOUR TIPS IN THIS FILE **/
1. Be clear that the goal of the game is to get each box in one storage, so the heuristics' focus is on the boxes. The positions of robots could indeed affect the path and optimality, but given a time constraint, I would say prioritize finding a good heuristics for the boxes.


2. Instead of using Manhattan or any other distance "assuming there's no obstacle in between" and then count in the obstacles' impact later, I would suggest calculating the distances with the obstacles included in the first place. One way to do this is use the shortest path from the box to a storage given by A* as the distance. 


3. For improving time complexity, it is very useful to trade off some space complexity and store information that are reusable. For example, when starting the game (i.e. the node has no parents or the action is "start"), you can calculate all the distances from each position (that the box can possibly be in) to each storage, and store them in a global dictionary, so that you can simply index the dictionary for the distance later.


4. Storing past values in a global variable can also be used for past heuristics, since many states are already visited in prior iterations. When looking for the heuristic of a state, if the boxes' positions are the same as a previous state, the heuristic value extracted from the global variable can be directly reused; if they haven't shown up before, their corresponding heuristics will need to be calculated and than stored.


5. In order to avoid the problem of having multiple boxes in a storage yet keep the heuristic admissible, you could get the permutations of the boxes' orders. Then, by looping through each permutation and pairing up storages and boxes in such specified orders, you will get the total distance for every possible combination and boxes and storages, where the minimum total distance will be returned as the optimal (and therefore admissible).